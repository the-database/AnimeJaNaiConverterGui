<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="using:AnimeJaNaiConverterGui.ViewModels"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:hypertext="clr-namespace:HyperText.Avalonia.Controls;assembly=HyperText.Avalonia"
        xmlns:materialIcons="clr-namespace:Material.Icons.Avalonia;assembly=Material.Icons.Avalonia"
        mc:Ignorable="d" d:DesignWidth="1920" d:DesignHeight="1080"
        Width="1920" Height="1080"
        WindowStartupLocation="CenterScreen"
        x:Class="AnimeJaNaiConverterGui.Views.MainWindow"
        x:DataType="vm:MainWindowViewModel"
        Icon="/Assets/logo.ico"
        Title="AnimeJaNaiConverterGui">

  <Window.Styles>
    <Style Selector="TabControl[TabStripPlacement=Top]">
      <!-- Override styled behaviour -->
      <Setter Property="Padding" Value="0"/>
    </Style>
    <Style Selector="TextBlock">
      <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style Selector="TextBox">
      <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    <Style Selector="Border.border">

      <Setter Property="Margin" Value="0,10,0,0" />
      <Setter Property="CornerRadius" Value="5" />
      <Setter Property="BorderBrush" Value="#33888888" />
      <Setter Property="BorderThickness" Value="1" />
      <Setter Property="Padding" Value="10" />
    </Style>
  </Window.Styles>
  
    <Design.DataContext>
        <!-- This only sets the DataContext for the previewer in an IDE,
             to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) -->
        <vm:MainWindowViewModel/>
    </Design.DataContext>

    <DockPanel>

      <StackPanel DockPanel.Dock="Bottom">

        <StackPanel Orientation="Horizontal">
          <Button Margin="20,10,0,10" FontWeight="Bold" Background="Green" IsEnabled="{Binding UpscaleEnabled}" Command="{Binding RunUpscale}">
            <StackPanel Orientation="Horizontal">
              <materialIcons:MaterialIcon Kind="PlayCircle" />
              <TextBlock Margin="5,0,0,0">Upscale</TextBlock>
            </StackPanel>

          </Button>
          <Button Margin="20,10,0,10" FontWeight="Bold" Background="Red" IsEnabled="{Binding Upscaling}" Command="{Binding CancelUpscale}">
            <StackPanel Orientation="Horizontal">
              <materialIcons:MaterialIcon Kind="StopCircle" />
              <TextBlock Margin="5,0,0,0">Cancel</TextBlock>
            </StackPanel>
          </Button>
        </StackPanel>

        <StackPanel IsVisible="{Binding ShowConsole}" >
          <TextBlock Margin="20,10,0,0" FontWeight="Bold" Text="Console"></TextBlock>
          <ScrollViewer x:Name="ConsoleScrollViewer" Margin="0,10,0,0" Background="#111111" Height="500" Width="500" HorizontalScrollBarVisibility="Auto" Foreground="Gray"  PropertyChanged="ConsoleScrollViewer_PropertyChanged">
            <SelectableTextBlock x:Name="ConsoleTextBlock" Margin="20" Text="{Binding ConsoleText}" FontFamily="Consolas" PropertyChanged="ConsoleTextBlock_PropertyChanged" />
          </ScrollViewer>
        </StackPanel>

        <DockPanel Margin="0" Height="30" DockPanel.Dock="Bottom" HorizontalAlignment="Stretch">

          <TextBlock Margin="10,10,10,0" DockPanel.Dock="Left" FontSize="10" Text="{Binding LeftStatus}" />
          <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
            

            <ToggleButton IsChecked="{Binding ShowConsole}" FontSize="10" Margin="5,0,5,0">
              <StackPanel Orientation="Horizontal">
                <materialIcons:MaterialIcon Kind="Console" VerticalAlignment="Center" />
                <TextBlock Margin="5,0,5,0" VerticalAlignment="Center">Console</TextBlock>
              </StackPanel>

            </ToggleButton>
          </StackPanel>

          <Rectangle />
        </DockPanel>
      </StackPanel>
      
      
    <ScrollViewer HorizontalScrollBarVisibility="Auto">
      <StackPanel Margin="20">
        <TextBlock FontWeight="Bold" Text="Video Input and Output"></TextBlock>
        <Border Classes="border">
          <StackPanel>
          
        <TabControl SelectedIndex="{Binding SelectedTabIndex}">
          <TabItem VerticalContentAlignment="Center" FontSize="16">
            <TabItem.Header>
              <StackPanel Orientation="Horizontal">
                <materialIcons:MaterialIcon Kind="File" />
                <TextBlock Margin="5,0,5,0">Single Video Upscale</TextBlock>
              </StackPanel>
            </TabItem.Header>
            
            <Border Classes="border">
              <StackPanel>
                <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
                  <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Input Video</TextBlock>
                  <TextBox x:Name="InputFileNameTextBox" Margin="0,0,5,0" Text="{Binding InputFilePath}" IsReadOnly="False" Width="800" DragDrop.AllowDrop="True" />
                  <Button Content="Select File" Click="OpenInputFileButtonClick" />
                  <TextBlock Foreground="Gray" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">Path of the video file to upscale.</TextBlock>
                </StackPanel>
              </StackPanel>
            </Border>
            
          </TabItem>
          <TabItem VerticalAlignment="Center" FontSize="16">
            <TabItem.Header>
              <StackPanel Orientation="Horizontal">
                <materialIcons:MaterialIcon Kind="Folder" />
                <TextBlock Margin="5,0,5,0">Batch Video Upscale</TextBlock>
              </StackPanel>
              </TabItem.Header>
            
              <Border Classes="border">
                <StackPanel>
                  <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
                    <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Input Folder</TextBlock>
                    <TextBox x:Name="InputFolderNameTextBox" Margin="0,0,5,0" Text="{Binding InputFolderPath}" IsReadOnly="False" Width="800" DragDrop.AllowDrop="True" />
                    <Button Content="Select Folder" Click="OpenInputFolderButtonClick" />
                    <TextBlock Foreground="Gray" Width="450" TextWrapping="WrapWithOverflow" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">
                      Path of the folder to upscale. The folder will be scanned and all video files (<Run FontFamily="Consolas">*.mkv</Run>, <Run FontFamily="Consolas">*.mp4</Run>, <Run FontFamily="Consolas">*.mpg</Run>, <Run FontFamily="Consolas">*.mpeg</Run>, <Run FontFamily="Consolas">*.avi</Run>, <Run FontFamily="Consolas">*.mov</Run>, <Run FontFamily="Consolas">*.wmv</Run>) found will be upscaled.
                    </TextBlock>
                  </StackPanel>
                </StackPanel>
              </Border>
          </TabItem>
        </TabControl>

            <Border Classes="border">

              <StackPanel>

                <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
                  <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Output Folder</TextBlock>
                  <TextBox x:Name="OutputFolderNameTextBox" Margin="0,0,5,0" Text="{Binding OutputFolderPath}" IsReadOnly="False" Width="800" DragDrop.AllowDrop="True" />
                  <Button Content="Select Folder" Click="OpenOutputFolderButtonClick" />
                  <TextBlock Foreground="Gray" Width="450" TextWrapping="WrapWithOverflow" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">
                    Path of the folder to save the upscaled video files.
                  </TextBlock>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="10,0,0,10">
                  <TextBlock Margin="0,0,5,0">Output Filename</TextBlock>
                  <TextBox Text="{Binding OutputFilename}" Margin="0,0,5,0" IsReadOnly="False" Width="600" DragDrop.AllowDrop="True" />
                  <SelectableTextBlock Foreground="Gray" Width="400" TextWrapping="WrapWithOverflow" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">
                    The filename of the upscaled video, including the desired file extension. <Run FontFamily="Consolas">%filename%</Run> is the input filename without extension. 
                  </SelectableTextBlock>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="10,0,0,0">
                  <CheckBox IsChecked="{Binding OverwriteExistingVideos}" Content="Allow Videos in Output Path to be Overwritten" />
                  <TextBlock Width="600" TextWrapping="WrapWithOverflow" Foreground="Gray" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">If unchecked, upscaling will be skipped for videos that already exist in the output path. If checked, any videos that already exist in the output path will be overwritten without warning. Use with caution.</TextBlock>
                </StackPanel>
                
              </StackPanel>

            </Border>

            <Border Classes="border">
              <StackPanel>
                <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
                  <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">FFmpeg Output Video Settings</TextBlock>
                  <TextBox Margin="0,0,5,0" Text="{Binding FfmpegVideoSettings}" IsReadOnly="False" Width="800" />
                  <TextBlock Foreground="Gray" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">Video encoding settings to pass to FFmpeg. Choose a preset below or edit the text to use custom settings.</TextBlock>
                </StackPanel>


                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="10,10,0,10">
                  <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">FFmpeg Presets</TextBlock>
                  <ToggleButton IsChecked="{Binding FfmpegHevcNvencSelected}" Content="NVENC HEVC" Command="{Binding SetFfmpegHevcNvenc}" />
                  <ToggleButton IsChecked="{Binding FfmpegX265Selected}" Content="x265 (CPU)" Command="{Binding SetFfmpegX265}" />
                  <ToggleButton IsChecked="{Binding FfmpegX264Selected}" Content="x264 (CPU)" Command="{Binding SetFfmpegX264}" />
                  <ToggleButton IsChecked="{Binding FfmpegLosslessSelected}" Content="Lossless (CPU)" Command="{Binding SetFfmpegLossless}" />
                  <TextBlock Foreground="Gray" FontSize="12" VerticalAlignment="Center" Margin="40,0,0,0" xml:space="preserve"><Bold>NVENC HEVC</Bold>: HEVC compression with NVENC, fast encode using GPU but lower quality than CPU encoding.  
<Bold>x265 (CPU)</Bold>: x265 compression (<hypertext:Hyperlink Url="https://ffmpeg.org/ffmpeg-codecs.html#libx265" />), more efficient compression but slower to encode.
<Bold>x265 (CPU)</Bold>: x264 compression (<hypertext:Hyperlink Url="https://ffmpeg.org/ffmpeg-codecs.html#libx264_002c-libx264rgb" />), OK compression, faster to encode.
<Bold>Lossless (CPU)</Bold>: FFV1 lossless compression, usually fastest to encode but extremely large filesize, and may be slower if bottlenecked by a slow storage drive.
            </TextBlock>
                </StackPanel>
              </StackPanel>
            </Border>

          </StackPanel>
          </Border>

        <!-- Upscaling -->
        <TextBlock Margin="0,40,0,0" FontWeight="Bold" Text="Upscale Settings"></TextBlock>
        <Border Classes="border">
          <StackPanel>
            <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
              <CheckBox  IsChecked="{Binding ShowAdvancedSettings}" Content="Show More Upscale Settings" />
            </StackPanel>
        <ItemsControl ItemsSource="{Binding UpscaleSettings}" >
          <ItemsControl.ItemTemplate>
            <DataTemplate x:DataType="vm:UpscaleModel">
              <Border Classes="border">
                <StackPanel>
                  <TextBlock FontSize="16" FontWeight="Bold" Margin="10,10,0,10" Text="{Binding ModelHeader}" />
                  <StackPanel Orientation="Horizontal" Margin="10,10,0,10" IsVisible="{Binding $parent[ItemsControl].((vm:MainWindowViewModel)DataContext).ShowAdvancedSettings}}">
                    <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Resize Height Before Upscale</TextBlock>
                    <TextBox Margin="0,0,5,0" Text="{Binding ResizeHeightBeforeUpscale}" IsReadOnly="False" />
                    <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">px</TextBlock>
                    <TextBlock Foreground="Gray" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">Resize the video to this height before running this model, set to 0 to disable.</TextBlock>
                  </StackPanel>
                  <StackPanel Orientation="Horizontal" Margin="10,10,0,10" IsVisible="{Binding $parent[ItemsControl].((vm:MainWindowViewModel)DataContext).ShowAdvancedSettings}">
                    <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Resize Factor Before Upscale</TextBlock>
                    <TextBox Margin="0,0,5,0" Text="{Binding ResizeFactorBeforeUpscale}" IsReadOnly="False" />
                    <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">x</TextBlock>
                    <TextBlock Foreground="Gray" Width="800" TextWrapping="WrapWithOverflow" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">
                      Resize the video by this factor before running this model. The video width and height are divided by this number, so a value of 1 performs no resize, and a value of 2 cuts the width and height of the video in half. This setting is ignored if Resize Height Before Upscale is specified.
                    </TextBlock>
                  </StackPanel>
                  <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
                    <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">ONNX Model Path</TextBlock>
                    <TextBox Margin="0,0,5,0" Text="{Binding OnnxModelPath}" IsReadOnly="False" Width="800" />
                    <Button Content="Select File" Click="OpenOnnxFileButtonClick" />
                    <TextBlock Foreground="Gray" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">File path of the ONNX model to run.</TextBlock>
                  </StackPanel>
                  <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
                    <Button Command="{Binding $parent[ItemsControl].((vm:MainWindowViewModel)DataContext).DeleteModel}"
                            CommandParameter="{Binding}"
                            >
                        <StackPanel Orientation="Horizontal">
                          <materialIcons:MaterialIcon Kind="MinusCircle" />
                          <TextBlock Margin="5,0,0,0">Remove Model</TextBlock>
                        </StackPanel>
                      </Button>
                  </StackPanel>
                </StackPanel>
              </Border>
            </DataTemplate>
          </ItemsControl.ItemTemplate>
        </ItemsControl>
        <Button Margin="10,20,0,20" Command="{Binding AddModel}">
          <StackPanel Orientation="Horizontal">
            <materialIcons:MaterialIcon Kind="PlusCircle" />
            <TextBlock Margin="5,0,0,0">Add Model</TextBlock>
          </StackPanel>
        </Button>
            
            

        <StackPanel Orientation="Horizontal" Margin="10,10,0,10" IsVisible="{Binding ShowAdvancedSettings}">
          <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Enable RIFE 2x Interpolation</TextBlock>
          <CheckBox IsChecked="{Binding EnableRife}" />
          <TextBlock FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">Whether or not to run RIFE video frame interpolation.</TextBlock>
        </StackPanel>

        <StackPanel Orientation="Horizontal" Margin="10,10,0,10">
          <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Final Resize Height</TextBlock>
          <NumericUpDown Margin="0,0,5,0" Text="{Binding FinalResizeHeight, FallbackValue=0}" AllowSpin="False" ShowButtonSpinner="False"  />
          <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">px</TextBlock>
          <TextBlock Foreground="Gray" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">
            Resize the video to this height after running all models, set to 0 to disable. Note that the final video width and height must be divisble by 2 or the output video will be invalid.
          </TextBlock>
        </StackPanel>

        <StackPanel Orientation="Horizontal" Margin="10,10,0,10" IsVisible="{Binding ShowAdvancedSettings}">
          <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Final Resize Factor</TextBlock>
          <TextBox Margin="0,0,5,0" VerticalAlignment="Center" Text="{Binding FinalResizeFactor, FallbackValue=1}" IsReadOnly="False" />
          <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">x</TextBlock>
          <TextBlock Foreground="Gray" Width="800" TextWrapping="WrapWithOverflow" FontSize="12" VerticalAlignment="Center" Margin="20,0,0,0">
            Resize the video by this factor after running all models. The video width and height are divided by this number, so a value of 1 performs no resize, and a value of 2 cuts the width and height of the video in half. This setting is ignored if Final Resize Height is specified. Note that the final video width and height must be divisble by 2 or the output video will be invalid.
          </TextBlock>
        </StackPanel>

        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="10,10,0,10">
          <TextBlock Margin="0,0,5,0" VerticalAlignment="Center">Upscaling Backend</TextBlock>
          <ToggleButton IsChecked="{Binding TensorRtSelected}" Content="TensorRT" Command="{Binding SetTensorRtSelected}" />
          <ToggleButton IsChecked="{Binding DirectMlSelected}" Content="DirectML" Command="{Binding SetDirectMlSelected}" />
          <ToggleButton IsChecked="{Binding NcnnSelected}" Content="NCNN" Command="{Binding SetNcnnSelected}" />
          <TextBlock Foreground="Gray" Width="900" TextWrapping="WrapWithOverflow" FontSize="12" VerticalAlignment="Center" Margin="40,0,0,0" xml:space="preserve"><Bold>TensorRT</Bold>: Fastest option but NVIDIA only. Supports fp16 and fp32 ONNX models. fp16 models are recommended for faster performance and reduced VRAM usage without any loss in quality. The initial engine generation may require several minutes but only needs to be done once.
<Bold>DirectML</Bold>: Compatible with NVIDIA, AMD, and Intel GPUs but slower than TensorRT. Supports fp32 ONNX models only.
<Bold>NCNN</Bold>: Compatible with NVIDIA, AMD, and Intel GPUs but typically slower than DirectML. Supports fp32 ONNX models only.
        </TextBlock>
        </StackPanel>            
          </StackPanel>
        </Border>

      </StackPanel>
    </ScrollViewer>
    </DockPanel>
</Window>
