//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VideoJaNai.Lang {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("VideoJaNai.Lang.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add Model.
        /// </summary>
        public static string AddModelButtonText {
            get {
                return ResourceManager.GetString("AddModelButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If unchecked, upscaling will be skipped for videos that already exist in the output path. If checked, any videos that already exist in the output path will be overwritten without warning. Use with caution..
        /// </summary>
        public static string AllowOverwriteDescription {
            get {
                return ResourceManager.GetString("AllowOverwriteDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow Videos in Output Path to be Overwritten.
        /// </summary>
        public static string AllowOverwriteLabel {
            get {
                return ResourceManager.GetString("AllowOverwriteLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App is not installed; auto update settings unavailable..
        /// </summary>
        public static string AppNotInstalledText {
            get {
                return ResourceManager.GetString("AppNotInstalledText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App Settings.
        /// </summary>
        public static string AppSettingsButtonText {
            get {
                return ResourceManager.GetString("AppSettingsButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to App Settings.
        /// </summary>
        public static string AppSettingsHeader {
            get {
                return ResourceManager.GetString("AppSettingsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether to automatically check for and install app updates..
        /// </summary>
        public static string AutoUpdateDescription {
            get {
                return ResourceManager.GetString("AutoUpdateDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto Update.
        /// </summary>
        public static string AutoUpdateLabel {
            get {
                return ResourceManager.GetString("AutoUpdateLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Batch Video Upscale.
        /// </summary>
        public static string BatchVideoUpscaleTabHeader {
            get {
                return ResourceManager.GetString("BatchVideoUpscaleTabHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cancel.
        /// </summary>
        public static string CancelButtonText {
            get {
                return ResourceManager.GetString("CancelButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check for Updates Now.
        /// </summary>
        public static string CheckForUpdatesNowButtonText {
            get {
                return ResourceManager.GetString("CheckForUpdatesNowButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Console.
        /// </summary>
        public static string ConsoleButtonText {
            get {
                return ResourceManager.GetString("ConsoleButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current Version.
        /// </summary>
        public static string CurrentVersionLabel {
            get {
                return ResourceManager.GetString("CurrentVersionLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Download Update.
        /// </summary>
        public static string DownloadUpdateButtonText {
            get {
                return ResourceManager.GetString("DownloadUpdateButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether or not to run video frame interpolation..
        /// </summary>
        public static string EnableInterpolationDescription {
            get {
                return ResourceManager.GetString("EnableInterpolationDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enable Interpolation.
        /// </summary>
        public static string EnableInterpolationLabel {
            get {
                return ResourceManager.GetString("EnableInterpolationLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whether or not to use the ensemble version of the model, which improves quality but runs slower..
        /// </summary>
        public static string EnsembleDescription {
            get {
                return ResourceManager.GetString("EnsembleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ensemble.
        /// </summary>
        public static string EnsembleLabel {
            get {
                return ResourceManager.GetString("EnsembleLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Export Workflow.
        /// </summary>
        public static string ExportWorkflowButtonText {
            get {
                return ResourceManager.GetString("ExportWorkflowButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Video encoding settings to pass to FFmpeg. Choose a preset below or edit the text to use custom settings..
        /// </summary>
        public static string FfmpegOutputSettingsDescription {
            get {
                return ResourceManager.GetString("FfmpegOutputSettingsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FFmpeg Output Video Settings.
        /// </summary>
        public static string FfmpegOutputSettingsLabel {
            get {
                return ResourceManager.GetString("FfmpegOutputSettingsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FFV1 lossless compression, usually fastest to encode but extremely large filesize, and may be slower if bottlenecked by a slow storage drive..
        /// </summary>
        public static string FfmpegPresetsDescriptionLossless {
            get {
                return ResourceManager.GetString("FfmpegPresetsDescriptionLossless", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HEVC compression with NVENC, fast encode using GPU but lower quality than CPU encoding..
        /// </summary>
        public static string FfmpegPresetsDescriptionNvencHevc {
            get {
                return ResourceManager.GetString("FfmpegPresetsDescriptionNvencHevc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to x264 compression, OK compression, faster to encode..
        /// </summary>
        public static string FfmpegPresetsDescriptionX264 {
            get {
                return ResourceManager.GetString("FfmpegPresetsDescriptionX264", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to x265 compression, more efficient compression but slower to encode..
        /// </summary>
        public static string FfmpegPresetsDescriptionX265 {
            get {
                return ResourceManager.GetString("FfmpegPresetsDescriptionX265", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FFmpeg Presets.
        /// </summary>
        public static string FfmpegPresetsLabel {
            get {
                return ResourceManager.GetString("FfmpegPresetsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resize the video by this factor after running all models. The video width and height are scaled by this percentage, so a value of 100% performs no resize, and a value of 50% cuts the width and height of the video in half. This setting is ignored if Final Resize Height is specified. Note that the final video width and height must be divisble by 2 or the output video will be invalid..
        /// </summary>
        public static string FinalResizeFactorDescription {
            get {
                return ResourceManager.GetString("FinalResizeFactorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Final Resize Factor.
        /// </summary>
        public static string FinalResizeFactorLabel {
            get {
                return ResourceManager.GetString("FinalResizeFactorLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resize the video to this height after running all models, set to 0 to disable. Note that the final video width and height must be divisble by 2 or the output video will be invalid..
        /// </summary>
        public static string FinalResizeHeightDescription {
            get {
                return ResourceManager.GetString("FinalResizeHeightDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Final Resize Height.
        /// </summary>
        public static string FinalResizeHeightLabel {
            get {
                return ResourceManager.GetString("FinalResizeHeightLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Performing first time setup. This may take several minutes....
        /// </summary>
        public static string FirstTimeSetupText {
            get {
                return ResourceManager.GetString("FirstTimeSetupText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Import Workflow.
        /// </summary>
        public static string ImportWorkflowButtonText {
            get {
                return ResourceManager.GetString("ImportWorkflowButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path of the folder to upscale. The folder will be scanned and all video files (*.mkv, *.mp4, *.mpg, *.mpeg, *.avi, *.mov, *.wmv) found will be upscaled..
        /// </summary>
        public static string InputFolderDescription {
            get {
                return ResourceManager.GetString("InputFolderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input Folder.
        /// </summary>
        public static string InputFolderLabel {
            get {
                return ResourceManager.GetString("InputFolderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path of the video file to upscale..
        /// </summary>
        public static string InputVideoDescription {
            get {
                return ResourceManager.GetString("InputVideoDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input Video.
        /// </summary>
        public static string InputVideoLabel {
            get {
                return ResourceManager.GetString("InputVideoLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interpolation factor represented as a fraction. For example, 2 / 1 will double the framerate..
        /// </summary>
        public static string InterpolationFactorDescription {
            get {
                return ResourceManager.GetString("InterpolationFactorDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interpolation Factor.
        /// </summary>
        public static string InterpolationFactorLabel {
            get {
                return ResourceManager.GetString("InterpolationFactorLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interpolation model to run. Higher RIFE version is newer and usually better quality..
        /// </summary>
        public static string InterpolationModelDescription {
            get {
                return ResourceManager.GetString("InterpolationModelDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Model.
        /// </summary>
        public static string InterpolationModelLabel {
            get {
                return ResourceManager.GetString("InterpolationModelLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interpolation Settings.
        /// </summary>
        public static string InterpolationSettingsHeader {
            get {
                return ResourceManager.GetString("InterpolationSettingsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Model.
        /// </summary>
        public static string ModelHeader {
            get {
                return ResourceManager.GetString("ModelHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show More Upscale Settings.
        /// </summary>
        public static string MoreUpscaleSettingsLabel {
            get {
                return ResourceManager.GetString("MoreUpscaleSettingsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File path of the ONNX model to run..
        /// </summary>
        public static string OnnxModelPathDescription {
            get {
                return ResourceManager.GetString("OnnxModelPathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ONNX Model Path.
        /// </summary>
        public static string OnnxModelPathLabel {
            get {
                return ResourceManager.GetString("OnnxModelPathLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filename of the upscaled video, including the desired file extension. %filename% is the input filename without extension..
        /// </summary>
        public static string OutputFilenameDescription {
            get {
                return ResourceManager.GetString("OutputFilenameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output Filename.
        /// </summary>
        public static string OutputFilenameLabel {
            get {
                return ResourceManager.GetString("OutputFilenameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path of the folder to save the upscaled video files..
        /// </summary>
        public static string OutputFolderDescription {
            get {
                return ResourceManager.GetString("OutputFolderDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output Folder.
        /// </summary>
        public static string OutputFolderLabel {
            get {
                return ResourceManager.GetString("OutputFolderLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove Model.
        /// </summary>
        public static string RemoveModelButtonText {
            get {
                return ResourceManager.GetString("RemoveModelButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reset Workflow.
        /// </summary>
        public static string ResetWorkflowButtonText {
            get {
                return ResourceManager.GetString("ResetWorkflowButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resize the video by this factor before running this model. The video width and height are scaled by this percentage, so a value of 100% performs no resize, and a value of 50% cuts the width and height of the video in half. This setting is ignored if Resize Height Before Upscale is specified..
        /// </summary>
        public static string ResizeFactorBeforeUpscaleDescription {
            get {
                return ResourceManager.GetString("ResizeFactorBeforeUpscaleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resize Factor Before Upscale.
        /// </summary>
        public static string ResizeFactorBeforeUpscaleLabel {
            get {
                return ResourceManager.GetString("ResizeFactorBeforeUpscaleLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resize the video to this height before running this model, set to 0 to disable..
        /// </summary>
        public static string ResizeHeightBeforeUpscaleDescription {
            get {
                return ResourceManager.GetString("ResizeHeightBeforeUpscaleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resize Height Before Upscale.
        /// </summary>
        public static string ResizeHeightBeforeUpscaleLabel {
            get {
                return ResourceManager.GetString("ResizeHeightBeforeUpscaleLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Restart to Update VideoJaNai.
        /// </summary>
        public static string RestartToUpdateButtonText {
            get {
                return ResourceManager.GetString("RestartToUpdateButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return.
        /// </summary>
        public static string ReturnButtonText {
            get {
                return ResourceManager.GetString("ReturnButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scene detection is used to prevent interpolating frames during hard transitions between scenes. The threshold adjusts the sensitivity for what is considered a scene change. If the threshold is too high, more interpolation artifacts may be visible during scene transitions. If the threshold is too low, the video may stutter more..
        /// </summary>
        public static string SceneDetectionThresholdDescription {
            get {
                return ResourceManager.GetString("SceneDetectionThresholdDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scene Detection Threshold.
        /// </summary>
        public static string SceneDetectionThresholdLabel {
            get {
                return ResourceManager.GetString("SceneDetectionThresholdLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select File.
        /// </summary>
        public static string SelectFileButtonText {
            get {
                return ResourceManager.GetString("SelectFileButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select Folder.
        /// </summary>
        public static string SelectFolderButtonText {
            get {
                return ResourceManager.GetString("SelectFolderButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single Video Upscale.
        /// </summary>
        public static string SingleVideoUpscaleTabHeader {
            get {
                return ResourceManager.GetString("SingleVideoUpscaleTabHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upscale.
        /// </summary>
        public static string UpscaleButtonText {
            get {
                return ResourceManager.GetString("UpscaleButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upscale Settings.
        /// </summary>
        public static string UpscaleSettingsHeader {
            get {
                return ResourceManager.GetString("UpscaleSettingsHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compatible with NVIDIA, AMD, and Intel GPUs but slower than TensorRT. Supports fp32 ONNX models only..
        /// </summary>
        public static string UpscalingBackendDescriptionDirectMl {
            get {
                return ResourceManager.GetString("UpscalingBackendDescriptionDirectMl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compatible with NVIDIA, AMD, and Intel GPUs but typically slower than DirectML. Supports fp32 ONNX models only..
        /// </summary>
        public static string UpscalingBackendDescriptionNcnn {
            get {
                return ResourceManager.GetString("UpscalingBackendDescriptionNcnn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fastest option but NVIDIA only. Supports fp16 and fp32 ONNX models. fp16 models are recommended for faster performance and reduced VRAM usage without any loss in quality. The initial engine generation may require several minutes but only needs to be done once..
        /// </summary>
        public static string UpscalingBackendDescriptionTensorRt {
            get {
                return ResourceManager.GetString("UpscalingBackendDescriptionTensorRt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Upscaling Backend.
        /// </summary>
        public static string UpscalingBackendLabel {
            get {
                return ResourceManager.GetString("UpscalingBackendLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Video Input and Output.
        /// </summary>
        public static string VideoInputAndOutputHeader {
            get {
                return ResourceManager.GetString("VideoInputAndOutputHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflow Name.
        /// </summary>
        public static string WorkflowNameLabel {
            get {
                return ResourceManager.GetString("WorkflowNameLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflows.
        /// </summary>
        public static string WorkflowsLabel {
            get {
                return ResourceManager.GetString("WorkflowsLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Workflows provide convenient access to save and load preset settings for upscaling..
        /// </summary>
        public static string WorkflowsTooltip {
            get {
                return ResourceManager.GetString("WorkflowsTooltip", resourceCulture);
            }
        }
    }
}
